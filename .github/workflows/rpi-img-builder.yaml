name: Build arm images for RPI
on:
  push: 
    branches: 
      - master
      - BUILDER #remove after push to prod
      
jobs:
  prepareRASPAP:
    runs-on: ubuntu-latest
    steps:
      # Create a stage 'test-stage' instructing to add Nodesource repo and install nodejs as dependency
      - run: |
          mkdir -p test-stage/package-test &&
          {
          cat > test-stage/package-test/00-run-chroot.sh <<-EOF
          #!/bin/bash
          apt-get install -y curl
          curl -sL https://install.raspap.com | bash -s -- --yes --openvpn 1 --restapi 1 --adblock 1 --wireguard 1 --tcp-bbr 1
          EOF
          } &&
          chmod +x test-stage/package-test/00-run-chroot.sh &&
          echo "nodejs" > test-stage/package-test/01-packages &&
          {
          cat > test-stage/prerun.sh <<-EOF
          #!/bin/bash -e
          if [ ! -d "\${ROOTFS_DIR}" ]; then
            copy_previous
          fi
          EOF
          } &&
          chmod +x test-stage/prerun.sh

      - name: Build amd64 image
        id: build
        uses: usimd/pi-gen-action@v1
        with:
          compression: zip
          compression-level: 6
          disable-first-boot-user-rename: 0
          docker-opts: ''
          enable-noobs: false
          enable-ssh: 1 #discuss with @billz
          export-last-stage-only: true
          extra-host-dependencies: ''
          extra-host-modules: ''
          hostname: raspap
          image-name: 'raspap-latest'
          keyboard-keymap: gb
          keyboard-layout: English (UK)
          locale: en_GB.UTF-8
          password: 'raspap' #discuss with @billz
          pi-gen-dir: pi-gen
          pi-gen-release: Raspberry Pi reference
          pi-gen-repository: RPi-Distro/pi-gen
          pi-gen-version: arm64
          pubkey-only-ssh: 0
          pubkey-ssh-first-user: ''
          release: bookworm
          setfcap: ''
          timezone: Europe/London
          username: raspap
          verbose-output: true #change after pushing to prod
          stage-list: stage0 stage1 stage2 ./test-stage
      
    - name: Set output
      run: echo "image-path=${{ steps.build.outputs.image-path }}" >> $GITHUB_OUTPUT

    - uses: actions/upload-artifact@v4
      with:
        name: pi-gen-image
        path: ${{ steps.build.outputs.image-path }}
